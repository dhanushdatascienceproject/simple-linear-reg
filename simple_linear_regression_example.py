# -*- coding: utf-8 -*-
"""simple-linear-regression-example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KVE9mABGRRtO2YDZK4wF5FEDQIKO3zMZ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

df=pd.read_csv('height-weight.csv')

df



plt.scatter(df['Weight'],df['Height'])
plt.xlabel("Weight")
plt.ylabel("Height")

X=df['Weight']
y=df['Height']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)

y_train

y_test

## Standardize the dataset
from sklearn.preprocessing import StandardScaler
X_train = np.array(X_train).reshape(-1, 1)
X_test = np.array(X_test).reshape(-1, 1)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

plt.scatter(X_train,y_train)

from sklearn.linear_model import LinearRegression

regressor=LinearRegression()

regressor

type(X_train)

X_train=np.array(X_train).reshape(-1,1)
X_test=np.array(X_test).reshape(-1,1)

y_train.shape

regressor.fit(X_train,y_train)

print("Coefficient : ",regressor.coef_)
print("Intercept : ",regressor.intercept_)

plt.scatter(X_train,y_train)
plt.plot(X_train,regressor.predict(X_train))

y_pred_test=regressor.predict(X_test)

y_test

plt.scatter(X_test,y_test)
plt.plot(X_test,regressor.predict(X_test))

from sklearn.metrics import mean_squared_error,mean_absolute_error

mse=mean_squared_error(y_test,y_pred_test)
mae=mean_absolute_error(y_test,y_pred_test)
rmse=np.sqrt(mse)
print(mse)
print(mae)
print(rmse)

from sklearn.metrics import r2_score
score=r2_score(y_test,y_pred_test)



1 - (1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)

regressor.predict(scaler.transform([[75]]))

plt.scatter(y_test,y_pred_test)

residuals=y_test-y_pred_test

residuals

import seaborn as sns
sns.displot(residuals,kind="kde")

## Scatter plot with respect to prediction and residuals
## uniform distribution
plt.scatter(y_pred_test,residuals)

import statsmodels.api as sm

model = sm.OLS(y_train, X_train).fit()
predictions = model.predict(X_test)

print(model.summary())